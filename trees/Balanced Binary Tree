Balanced Binary Tree
Problem Description

Given a root of binary tree A, determine if it is height-balanced.

A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.



Problem Constraints
1 <= size of tree <= 100000



Input Format
First and only argument is the root of the tree A.



Output Format
Return 0 / 1 ( 0 for false, 1 for true ) for this problem.



Example Input
Input 1:

    1
   / \
  2   3
Input 2:

 
       1
      /
     2
    /
   3


Example Output
Output 1:

1
Output 2:

0


Example Explanation
Explanation 1:

It is a complete binary tree.
Explanation 2:

Because for the root node, left subtree has depth 2 and right subtree has depth 0. 
Difference = 2 > 1. 

/**
 * Definition for binary tree
 * class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) {this.val = x; this.left = this.right = null;}
 * }
 */
 class Info
 {
     public bool isBalanced {get;set;}
     public int height {get; set;}
 }
 
class Solution {
    public int isBalanced(TreeNode A) {
        Info r = getHeightBalance(A);
        
        if(r.isBalanced)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    
    public Info getHeightBalance(TreeNode A)
    {
        //Console.WriteLine(A.val + ".....");
        Info left;
        Info right;
        int hl = 0;
        int hr = 0;
        
        if(A.left != null)
        {
            left = getHeightBalance(A.left);
            hl = left.height + 1;
        }
        else
        {
            left = new Info() { isBalanced = true, height = 0};
           
        }
        if(A.right != null)
        {
            right = getHeightBalance(A.right);
             hr = right.height + 1;
        }
        else
        {
            right = new Info() { isBalanced = true, height = 0};
        }
        
        if(!left.isBalanced || !right.isBalanced)
        {
            return new Info() { isBalanced = false};
        }
        
        
        if(Math.Abs(hl-hr) > 1)
        {
            //Console.WriteLine(left.height + "-" + right.height);
            return new Info() { isBalanced = false};
        }
        else
        {
            //Console.WriteLine(A.val + "kk" + left.height + "zzz" + right.height);
             //Console.WriteLine(max(left.height, right.height) + 1);
            return new Info() { isBalanced = true, height = max(hl, hr) };
        }
    }
    
    public int max(int a, int b)
    {
        if(a > b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }
}
