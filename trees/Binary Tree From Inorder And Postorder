Binary Tree From Inorder And Postorder
Problem Description

Given inorder and postorder traversal of a tree, construct the binary tree.

NOTE: You may assume that duplicates do not exist in the tree.



Problem Constraints
1 <= number of nodes <= 105



Input Format
First argument is an integer array A denoting the inorder traversal of the tree.

Second argument is an integer array B denoting the postorder traversal of the tree.



Output Format
Return the root node of the binary tree.



Example Input
Input 1:

 A = [2, 1, 3]
 B = [2, 3, 1]
Input 2:

 A = [6, 1, 3, 2]
 B = [6, 3, 2, 1]


Example Output
Output 1:

   1
  / \
 2   3
Output 2:

   1  
  / \
 6   2
    /
   3


Example Explanation
Explanation 1:

 Create the binary tree and return the root node of the tree.
 
 /**
 * Definition for binary tree
 * class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) {this.val = x; this.left = this.right = null;}
 * }
 */
 using System.Collections.Generic;
 
class Solution {
    public TreeNode buildTree(List<int> A, List<int> B) {
        var d = new Dictionary<int, int>();
        for(int i=0;i<B.Count();i++)
        {
            d.Add(B[i], i);
        }
        
        return form(0, A.Count()-1, A, d);
    }
    
    public TreeNode form(int s, int e, List<int> A, Dictionary<int, int> d)
    {
        //Console.WriteLine(s + "-" + e);
        
        if(s > e)
        {
            return null;
        }
        
        if(s == e)
        {
            return new TreeNode(A[s]);
        }
        int ind = 0;
        int r = A[0];
        int ri =0;
        for(int i=s;i<=e;i++)
        {
            if(d.ContainsKey(A[i]) && d[A[i]] > ind)
            {
                ind = d[A[i]];
                r = A[i];
                ri = i;
            }
        }
        //Console.WriteLine(ind + "-" + r + "-" + ri);
        
        var root = new TreeNode(r);
        if(ri > 0)
        {
            root.left = form(s, ri-1, A, d);
        }
        else
        {
            //Console.WriteLine(ri);
            root.left = null;
        }
        
        if(ri < A.Count()-1)
        {
            root.right = form(ri+1, e, A, d);
        }
        else
        {
            //Console.WriteLine(ri);
            root.right = null;
        }
        
        return root;
    }
}
