Valid Binary Search Tree
Problem Description
You are given a binary tree represented by root A.

Assume a BST is defined as follows:

1) The left subtree of a node contains only nodes with keys less than the node's key.

2) The right subtree of a node contains only nodes with keys greater than the node's key.

3) Both the left and right subtrees must also be binary search trees.



Problem Constraints
1 <= Number of nodes in binary tree <= 105

0 <= node values <= 109



Input Format
First and only argument is head of the binary tree A.



Output Format
Return 0 if false and 1 if true.



Example Input
Input 1:

 
   1
  /  \
 2    3
Input 2:

 
  2
 / \
1   3


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 2 is not less than 1 but is in left subtree of 1.
Explanation 2:

Satisfies all conditions.

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int isValidBST(TreeNode A) {
        if(isValid(A, Integer.MIN_VALUE, Integer.MAX_VALUE))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    
    public boolean isValid(TreeNode A, int min, int max)
    {
        //System.out.println("start" + A.val);
        if(A.val < min || A.val > max)
        {
            return false;
        }
        
        boolean l = true;
        boolean r = true;
        if(A.left!=null)
        {
            //System.out.println("in" + A.val);
            l = isValid(A.left, min, A.val-1);
            //System.out.println(l);
        }
        
        if(A.right!=null)
        {
            r = isValid(A.right, A.val+1, max);
        }
        
        if(l && r)
        {
            return true;
        }
        else
        {
            //System.out.println(A.val);
            return false;
        }
    }
}
