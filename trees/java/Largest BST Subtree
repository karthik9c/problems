Largest BST Subtree
Problem Description
You are given a Binary Tree A with N nodes.

Write a function that returns the size of the largest subtree, which is also a Binary Search Tree (BST).

If the complete Binary Tree is BST, then return the size of the whole tree.

NOTE:

The largest subtree is the subtree with the most number of nodes.


Problem Constraints
1 <= N <= 105



Input Format
First and only argument is an pointer to root of the binary tree A.



Output Format
Return an single integer denoting the size of the largest subtree which is also a BST.



Example Input
Input 1:

     10
    / \
   5  15
  / \   \ 
 1   8   7
Input 2:

     5
    / \
   3   8
  / \ / \
 1  4 7  9


Example Output
Output 1:

 3
Output 2:

 7


Example Explanation
Explanation 1:

 Largest BST subtree is
                            5
                           / \
                          1   8
Explanation 2:

 Given binary tree itself is BST.

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int solve(TreeNode A) {
        Info ans = isvalid(A, Integer.MIN_VALUE, Integer.MAX_VALUE);
        
        return ans.c;
    }
    
    public Info isvalid(TreeNode A, int min, int max)
    {
        
        if(A == null)
        {
            return new Info(0, true);
        }
        Info l = isvalid(A.left,min, A.val-1);
        Info r = isvalid(A.right, A.val+1, max);
        
        if(l.s && r.s)
        {
            boolean j = true;
            if(A.left != null && A.val < A.left.val)
            {
                j = false;
            }
            if(A.right != null && A.val > A.right.val)
            {
                j = false;
            }
            if(j)
            {
                return new Info(r.c + l.c + 1, j);
            }
            else
            {
                return new Info(Math.max(l.c, r.c), j);
            }
            //System.out.println(A.val + "-"+ (r.c + l.c + 1)+"e"+j);
            //return new Info(r.c + l.c + 1, j);
            // if(r.c == l.c)
            // {
            //     return new Info(r.c+1, true);
            // }
            // else
            // {
            //     return new Info(Math.max(l.c, r.c)+1, true);
            // }
        }
        else
        {
            // if(l.s)
            // {
            //     return new Info(l.c+1, false);
            // }
            // else if(r.s)
            // {
            //     return new Info(r.c+1, false);
            // }
            // else
            {
                //System.out.println(A.val + "-"+ Math.max(l.c, r.c));
                return new Info(Math.max(l.c, r.c), false);
            }
        }
    }
}

class Info
{
    int c;
    boolean s;
    
    Info(int c, boolean s)
    {
        this.c = c;
        this.s = s;
    }
}
