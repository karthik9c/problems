Binary Tree From Inorder And Preorder
Problem Description
Given preorder and inorder traversal of a tree, construct the binary tree.

NOTE: You may assume that duplicates do not exist in the tree.



Problem Constraints
1 <= number of nodes <= 105



Input Format
First argument is an integer array A denoting the preorder traversal of the tree.

Second argument is an integer array B denoting the inorder traversal of the tree.



Output Format
Return the root node of the binary tree.



Example Input
Input 1:

 A = [1, 2, 3]
 B = [2, 1, 3]
Input 2:

 A = [1, 6, 2, 3]
 B = [6, 1, 3, 2]


Example Output
Output 1:

   1
  / \
 2   3
Output 2:

   1  
  / \
 6   2
    /
   3


Example Explanation
Explanation 1:

 Create the binary tree and return the root node of the tree.
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    HashMap<Integer, Integer> h = new HashMap<>();
    public TreeNode buildTree(int[] A, int[] B) {
        //HashMap<Integer, Integer> h = new HashMap<>();
        
        for(int i=0;i<A.length;i++)
        {
            h.put(A[i], i);
        }
        
        return build(0, A.length-1, A, B);
    }
    
    public TreeNode build(int s, int e, int[] A, int[] B)
    {
        //System.out.println(s+"-"+e);
        if(s == e)
        {
            return new TreeNode(B[s]);
        }
        if(s>e)
        {
            return null;
        }
        
        int mini = Integer.MAX_VALUE;
        int ti=s;
        for(int i=s;i<=e;i++)
        {
            if(h.get(B[i]) < mini)
            {
                mini = h.get(B[i]);
                ti = i;
            }

        }
        TreeNode t = new TreeNode(B[ti]);
        t.left = build(s, ti-1, A, B);
        t.right = build(ti+1, e, A, B);
        
        return t;
    }
}
