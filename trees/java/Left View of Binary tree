Left View of Binary tree
Problem Description
Given a binary tree of integers. Return an array of integers representing the left view of the Binary tree.

Left view of a Binary Tree is a set of nodes visible when the tree is visited from Left side

NOTE: The value comes first in the array which have lower level.



Problem Constraints
1 <= Number of nodes in binary tree <= 100000

0 <= node values <= 109



Input Format
First and only argument is a root node of the binary tree, A.



Output Format
Return an integer array denoting the left view of the Binary tree.



Example Input
Input 1:

            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8 
Input 2:

            1
           /  \
          2    3
           \
            4
             \
              5


Example Output
Output 1:

 [1, 2, 4, 8]
Output 2:

 [1, 2, 4, 5]


Example Explanation
Explanation 1:

 The Left view of the binary tree is returned.
 
 /**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    Queue<TreeNode> q = new LinkedList<TreeNode>();
    ArrayList<Integer> ans = new ArrayList<Integer>();
    public ArrayList<Integer> solve(TreeNode A) {
        q.add(A);
        q.add(null);
        ans.add(A.val);
        int c = 1;
        boolean g = true;
        while(q.size() != 0)
        {
            TreeNode t = q.remove();
            if(t == null)
            {
                if(q.size() == 0)
                {
                    break;
                }
                g = false;
                c++;
                q.add(null);
                continue;
            }
            
            if(!g)
            {
                ans.add(t.val);
                g = true;
            }
            
            if(t.left!=null)
            {
                q.add(t.left);
            }
            if(t.right!=null)
            {
                q.add(t.right);
            }
            
        }
        
        return ans;
        
    }
    
    
}
