Balanced Binary Tree
Problem Description
Given a root of binary tree A, determine if it is height-balanced.

A height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.



Problem Constraints
1 <= size of tree <= 100000



Input Format
First and only argument is the root of the tree A.



Output Format
Return 0 / 1 ( 0 for false, 1 for true ) for this problem.



Example Input
Input 1:

    1
   / \
  2   3
Input 2:

 
       1
      /
     2
    /
   3


Example Output
Output 1:

1
Output 2:

0


Example Explanation
Explanation 1:

It is a complete binary tree.
Explanation 2:

Because for the root node, left subtree has depth 2 and right subtree has depth 0. 
Difference = 2 > 1. 

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int isBalanced(TreeNode A) {
        
        if(check(A).sucess)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    
    public Info check(TreeNode A)
    {
        if(A == null)
        {
            return new Info(0, true);
        }
        Info l = check(A.left);
        Info r = check(A.right);
        
        if(!l.sucess || !r.sucess)
        {
            return new Info(Math.max(l.height, r.height), false);
        }
        
        if(Math.abs(l.height - r.height) <=1)
        {
            return new Info(Math.max(l.height, r.height)+1, true);
        }
        else
        {
            return new Info(Math.max(l.height, r.height)+1, false);
        }
    }
}

class Info
{
    int height;
    boolean sucess;
    
    Info(int h, boolean s)
    {
        this.height = h;
        this.sucess = s;
    }
}
