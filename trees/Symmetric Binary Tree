Symmetric Binary Tree
Problem Description

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is the root node of the binary tree.



Output Format
Return 0 / 1 ( 0 for false, 1 for true ).



Example Input
Input 1:

    1
   / \
  2   2
 / \ / \
3  4 4  3
Input 2:

    1
   / \
  2   2
   \   \
   3    3


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 The above binary tree is symmetric. 
Explanation 2:

The above binary tree is not symmetric.

/**
 * Definition for binary tree
 * class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) {this.val = x; this.left = this.right = null;}
 * }
 */
class Solution {
    public int isSymmetric(TreeNode A) {
        
        if(isSame(A, A))
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    
    public bool isSame(TreeNode l, TreeNode r)
    {
        if(l == null && r == null)
        {
            return true;
        }
        
        
        if((l == null || r == null) || (l.val != r.val))
        {
            return false;
        }
        
        bool f = isSame(l.left, r.right);
        bool s = isSame(l.right, r.left);
        
        return f & s;
    }
    
}
