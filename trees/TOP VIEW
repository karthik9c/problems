TOP VIEW
Problem Description

Given a binary tree of integers denoted by root A. Return an array of integers representing the top view of the Binary tree.

Top view of a Binary Tree is a set of nodes visible when the tree is visited from top.

Return the nodes in any order.



Problem Constraints
1 <= Number of nodes in binary tree <= 100000

0 <= node values <= 10^9



Input Format
First and only argument is head of the binary tree A.



Output Format
Return an array, representing the top view of the binary tree.



Example Input
Input 1:

 
            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8 
Input 2:

 
            1
           /  \
          2    3
           \
            4
             \
              5


Example Output
Output 1:

 [1, 2, 4, 8, 3, 7]
Output 2:

 [1, 2, 3]


Example Explanation
Explanation 1:

Top view is described.
Explanation 2:

Top view is described.

/**
 * Definition for binary tree
 * class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) {this.val = x; this.left = this.right = null;}
 * }
 */
class Solution {
    public List<int> solve(TreeNode A) {
        var l = new List<int>();
        //Console.WriteLine(A.val);
        l.Add(A.val);
        topLeft(A.left, ref l);
        topRight(A.right, ref l);
        
        return l;
    }
    
    public void topLeft(TreeNode A, ref List<int> r)
    {
        if(A == null)
        {
            //Console.WriteLine("nullL");
            return;
        }
        //Console.WriteLine(A.val);
        r.Add(A.val);
        
        topLeft(A.left, ref r);
    }
    
    public void topRight(TreeNode A, ref List<int> r)
    {
        if(A == null)
        {
            //Console.WriteLine("nullR");
            return;
        }
        //Console.WriteLine(A.val);
        r.Add(A.val);
        
        topRight(A.right, ref r);
    }
}
