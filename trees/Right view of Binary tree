Right view of Binary tree
Problem Description

Given a binary tree of integers denoted by root A. Return an array of integers representing the right view of the Binary tree.

Right view of a Binary Tree is a set of nodes visible when the tree is visited from Right side.



Problem Constraints
1 <= Number of nodes in binary tree <= 100000

0 <= node values <= 10^9



Input Format
First and only argument is head of the binary tree A.



Output Format
Return an array, representing the right view of the binary tree.



Example Input
Input 1:

 
            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8 
Input 2:

 
            1
           /  \
          2    3
           \
            4
             \
              5


Example Output
Output 1:

 [1, 3, 7, 8]
Output 2:

 [1, 3, 4, 5]


Example Explanation
Explanation 1:

Right view is described.
Explanation 2:

Right view is described.

/**
 * Definition for binary tree
 * class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) {this.val = x; this.left = this.right = null;}
 * }
 */
 
 
 using System.Collections.Generic;
 
 public class Info
 {
     public object N {get; set;}
     public int Level {get;set;}
     public Info(object t, int x) {this.N = t; this.Level = x;}
 }
class Solution {
    public List<int> solve(TreeNode A) {
        
        return levelOrderT(A);
    }
    
    public List<int> levelOrderT(TreeNode A)
    {
        var r = new List<int>();
        var d = new Dictionary<int, int>();
        int level = 0;
        var q = new Queue<Info>();
        var info = new Info(A, level);
        q.Enqueue(info);
        
        while(q.Count != 0)
        {
            var t = q.Dequeue();
            var N = (TreeNode) t.N;
            d[t.Level] = N.val;
            if(N.left != null)
            {
                q.Enqueue(new Info((object) N.left, t.Level + 1));
            }
            if(N.right != null)
            {
                q.Enqueue(new Info((object) N.right, t.Level + 1));
            }
            
            
        }
        
        for(int i=0;i<d.Count;i++)
        {
            r.Add(d.ElementAt(i).Value);
        }
        
        return r;
    }
    
   
}
