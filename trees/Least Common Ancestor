Least Common Ancestor
Problem Description

Find the lowest common ancestor in an unordered binary tree A given two values B and C in the tree.

Lowest common ancestor : the lowest common ancestor (LCA) of two nodes and w in a tree or directed acyclic graph (DAG) is the lowest (i.e. deepest) node that has both v and w as descendants.



Problem Constraints
1 <= size of tree <= 100000

1 <= B, C <= 109



Input Format
First argument is head of tree A.

Second argument is integer B.

Third argument is integer C.



Output Format
Return the LCA.



Example Input
Input 1:

 
      1
     /  \
    2    3
B = 2
C = 3
Input 2:

      1
     /  \
    2    3
   / \
  4   5
B = 4
C = 5


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 LCA is 1.
Explanation 2:

 LCA is 2.
 
 /**
 * Definition for binary tree
 * class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) {this.val = x; this.left = this.right = null;}
 * }
 */
class Solution {
    int count =0;
    public int lca(TreeNode A, int B, int C) {
        var r = findlca(A, B, C);
        
        if(r != null && count == 2)
        {
            return r.val;
        }
        else
        {
            return -1;
        }
    }
    
    public TreeNode findlca(TreeNode A, int B, int C)
    {
        if(A == null)
        {
            return null;
        }
        TreeNode t = null;
        
        if(A.val == B)
        {
            count++;
            t = A;
        }
        
        if(A.val == C)
        {
           count++;
            t = A;
        }
        
        var left = findlca(A.left, B, C);
        var right = findlca(A.right, B, C);
        
        if(t != null)
        {
            return t;
        }
        
        if(left != null && right != null)
        {
            return A;
        }
        else if(left != null)
        {
            return left;
        }
        else if(right != null)
        {
            return right;
        }
        else
        {
            return null;
        }
    }
}
