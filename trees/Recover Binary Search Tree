Recover Binary Search Tree
Problem Description
Two elements of a binary search tree (BST),represented by root A are swapped by mistake. Tell us the 2 values swapping which the tree will be restored.

A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?



Problem Constraints
1 <= size of tree <= 100000



Input Format
First and only argument is the head of the tree,A



Output Format
Return the 2 elements which need to be swapped.



Example Input
Input 1:

 
         1
        / \
       2   3
Input 2:

 
         2
        / \
       3   1



Example Output
Output 1:

 [2, 1]
Output 2:

 [3, 1]


Example Explanation
Explanation 1:

Swapping 1 and 2 will change the BST to be 
         2
        / \
       1   3
which is a valid BST 
Explanation 2:

Swapping 1 and 3 will change the BST to be 
         2
        / \
       1   3
which is a valid BST 

/**
 * Definition for binary tree
 * class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) {this.val = x; this.left = this.right = null;}
 * }
 */
class Solution {
    List<int> l = new List<int>();
    Stack<TreeNode> s = new Stack<TreeNode>();
    
    public List<int> recoverTree(TreeNode A) {
        var t = A;
        while(t != null)
        {
            //Console.WriteLine(t.val);
            s.Push(t);
            t = t.left;
        }
        
        var v = getNext();
        while(v != null)
        {
            //Console.WriteLine(v.val);
            var t1 = v;
            var t2 = getNext();
            //Console.WriteLine(t1.val + "-" + t2.val);
            if((t2 != null) && (t1.val > t2.val))
            {
                l.Add(t1.val);
                l.Add(t2.val);
            }
            
            v = t2;
        }
        
        if(l.Count() == 2)
        {
            l.Sort();
            return l;
        }
        else
        {
            
            //Console.WriteLine(l.Count());
            return new List<int>(){l[3], l[0]};
            //return l;
        }
    }
    
    public TreeNode getNext(){
        if(s.Count > 0)
        {
            var t = s.Pop();
            //Console.WriteLine(t.val + "-pop");
            var r = t.right;
            if(r != null)
            {
                //Console.WriteLine(r.val + "-push");
                s.Push(r);
                r = r.left;
            }
            
            //Console.WriteLine(t.val);
            while((r != null))
            {
                //Console.WriteLine(r.val + "-push");
                s.Push(r);
                r = r.left;
            }
            
            return t;
        }
        
        return null;
    }
    
}
