https://www.youtube.com/watch?v=Z6idIicFDOE

Maximum Frequency stack
Problem Description
You are given a matrix A which represents operations of size N x 2. Assume initially you have a stack-like data structure you have to perform operations on it.

Operations are of two types:

1 x: push an integer x onto the stack and return -1.

2 0: remove and return the most frequent element in the stack.

If there is a tie for the most frequent element, the element closest to the top of the stack is removed and returned.

A[i][0] describes the type of operation to be performed. A[i][1] describe the element x or 0 corresponding to the operation performed.



Problem Constraints
1 <= N <= 100000

1 <= A[i][0] <= 2

0 <= A[i][1] <= 109



Input Format
The only argument given is the integer array A.



Output Format
Return the array of integers denoting the answer to each operation.



Example Input
Input 1:

A = [
            [1, 5]
            [1, 7]
            [1, 5]
            [1, 7]
            [1, 4]
            [1, 5]
            [2, 0]
            [2, 0]
            [2, 0]
            [2, 0]  ]
Input 2:

 A =  [   
        [1, 5]
        [2, 0]
        [1, 4]   ]


Example Output
Output 1:

 [-1, -1, -1, -1, -1, -1, 5, 7, 5, 4]
Output 2:

 [-1, 5, -1]


Example Explanation
Explanation 1:

 Just simulate given operations.
Explanation 2:

 Just simulate given operations.
 
 public class Solution {
    public int[] solve(int[][] A) {
        HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();
        HashMap<Integer, Stack<Integer>> s = new HashMap<Integer, Stack<Integer>>();
        int max = 1;
        int[] ans = new int[A.length];
        
        for(int i=0;i<A.length;i++)
        {
            if(A[i][0] == 1)
            {
                ans[i] = -1;
                if(h.containsKey(A[i][1]))
                {
                    int t = h.get(A[i][1]);
                    t++;
                    max = Math.max(max, t);
                    h.put(A[i][1], t);
                    
                    if(s.containsKey(t))
                    {
                        Stack<Integer> ts = s.get(t);
                        ts.push(A[i][1]);
                        s.put(t, ts);
                    }
                    else
                    {
                        Stack<Integer> ts = new Stack<Integer>();
                        ts.push(A[i][1]);
                        s.put(t, ts);
                    }
                    
                }
                else
                {
                    max = Math.max(max, 1);
                    h.put(A[i][1], 1);
                    
                    if(s.containsKey(1))
                    {
                        
                        Stack<Integer> ts = s.get(1);
                        ts.push(A[i][1]);

                        s.put(1, ts);
                    }
                    else
                    {
                        
                        Stack<Integer> ts = new Stack<Integer>();
                        ts.push(A[i][1]);

                        s.put(1, ts);
                        Stack<Integer> ts1 = s.get(1);

                    }
                }
            }
            else
            {
                Stack<Integer> ts = s.get(max);

                ans[i] = ts.pop();

                s.put(max, ts);
                if(ts.size()==0 && max > 1)
                {
                    max--;
                }
                int k = h.get(ans[i]);
                k--;
                h.put(ans[i], k);
                
            }
        }
        
        return ans;
    }
}
