Reorder List
Problem Description
Given a singly linked list A

 A: A0 → A1 → … → An-1 → An 
reorder it to:

 A0 → An → A1 → An-1 → A2 → An-2 → … 
You must do this in-place without altering the nodes' values.



Problem Constraints
1 <= |A| <= 106



Input Format
The first and the only argument of input contains a pointer to the head of the linked list A.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

 A = [1, 2, 3, 4, 5] 
Input 2:

 A = [1, 2, 3, 4] 


Example Output
Output 1:

 [1, 5, 2, 4, 3] 
Output 2:

 [1, 4, 2, 3] 


Example Explanation
Explanation 1:

 The array will be arranged to [A0, An, A1, An-1, A2].
Explanation 2:

 The array will be arranged to [A0, An, A1, An-1, A2].
 
 /**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reorderList(ListNode A) {
        Stack<ListNode> s = new Stack<ListNode>();
        Queue<ListNode> q = new LinkedList<ListNode>();
        
        ListNode v = A;
        ListNode fv = A;
        ListNode ans = A;
        ListNode t = null;
        
        while(fv != null && fv.next!=null && fv.next.next!=null)
        {
            q.add(v);
            
            fv = fv.next.next;
            v = v.next;
            //System.out.println(v.val);
            //System.out.println(fv.val);
        }
        q.add(v);
        v = v.next;
        //q.add(v);
        while(v!=null)
        {
            s.push(v);
            v = v.next;
        }
        
        int z=0;
        //System.out.println(q.size() + "yy");
        while(q.size()>0 || s.size()>0)
        {
            if(q.size()>0)
            {
                if(z == 0)
                {
                    z++;
                    ListNode k = q.remove();
                    k.next = null;
                    ans = k;
                    t = k;
                }
                else
                {
                    ListNode k = q.remove();
                    //System.out.println(k.val + "..");
                    k.next = null;
                    t.next = k;
                    t = k;
                }
            }
            if(s.size()>0)
            {
                ListNode k = s.pop();
                //System.out.println(k.val+ ",,");
                k.next = null;
                t.next = k;
                t = k;
            }
            
        }
        
        return ans;
        
    }
}
