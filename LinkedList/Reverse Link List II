Reverse Link List II
Problem Description
Reverse a linked list A from position B to C.

NOTE: Do it in-place and in one-pass.



Problem Constraints
1 <= |A| <= 106

1 <= B <= C <= |A|



Input Format
The first argument contains a pointer to the head of the given linked list, A.

The second arugment contains an integer, B.

The third argument contains an integer C.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

 A = 1 -> 2 -> 3 -> 4 -> 5
 B = 2
 C = 4

Input 2:

 A = 1 -> 2 -> 3 -> 4 -> 5
 B = 1
 C = 5


Example Output
Output 1:

 1 -> 4 -> 3 -> 2 -> 5
Output 2:

 5 -> 4 -> 3 -> 2 -> 1


Example Explanation
Explanation 1:

 In the first example, we want to reverse the highlighted part of the given linked list : 1 -> 2 -> 3 -> 4 -> 5 
 Thus, the output is 1 -> 4 -> 3 -> 2 -> 5 
Explanation 2:

 In the second example, we want to reverse the highlighted part of the given linked list : 1 -> 4 -> 3 -> 2 -> 5  
 Thus, the output is 5 -> 4 -> 3 -> 2 -> 1 
 
 /**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode A, int B, int C) {
        
        ListNode t = A;
        int i=1;
        boolean s = false;
        boolean e = false;
        ListNode p = null;
        ListNode n = null;
        ListNode l = null;
        ListNode r = null;
        while(t!=null && i<B)
        {
            i++;
            p = t;
            
            t = t.next;
        }
        
        Stack<ListNode> st = new Stack<ListNode>();
        i = 1;
        
       
        while(i<=(C-B+1) & t!=null)
        {
            //System.out.println(i+"-");
            //System.out.println(t.val);
            i++;
            st.push(new ListNode(t.val));
            t = t.next;
            n = t;
        }
        
        ListNode c = p;
        while(st.size()>0)
        {
            if(c == null)
            {
                c = st.pop();
                A = c;
                //System.out.println(i+"@");
            //System.out.println(c.val);
            }
            else
            {
                c.next = st.pop();
            c = c.next;
            //System.out.println(i+"@@");
            //System.out.println(c.val);
            }
            
        }
        
        c.next = n;
        
        return A;
    }
}
