Copy List
Problem Description
A linked list A is given such that each node contains an additional random pointer which could point to any node in the list or NULL.

Return a deep copy of the list.



Problem Constraints
0 <= |A| <= 106



Input Format
The first argument of input contains a pointer to the head of linked list A.



Output Format
Return a pointer to the head of the required linked list.



Example Input
Given list
   1 -> 2 -> 3
with random pointers going from
  1 -> 3
  2 -> 1
  3 -> 1
  


Example Output
   1 -> 2 -> 3
with random pointers going from
  1 -> 3
  2 -> 1
  3 -> 1
  


Example Explanation
You should return a deep copy of the list. The returned answer should not contain the same node as the original list, but a copy of them. The pointers in the returned list should not link to any node in the original input list.

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        RandomListNode ans = null;
        RandomListNode ts = null;
        HashMap<Integer, RandomListNode> h = new HashMap<Integer, RandomListNode>();
        RandomListNode t = head;
        
        while(t!=null)
        {
            if(ans == null)
            {
                ans = new RandomListNode(t.label);
                ts = ans;
                h.put(t.label, ans);
            }
            else
            {
                ts.next = new RandomListNode(t.label);
                h.put(t.label, ts.next);
                ts = ts.next;
            }
            
            t = t.next;
            
            
        }
        
        t = head;
        ts = ans;
        while(t!=null)
        {
            if(t.random != null)
            {
                ts.random = h.get(t.random.label);
            }
            t = t.next;
            ts = ts.next;
        }
        
        return ans;
    }
}
