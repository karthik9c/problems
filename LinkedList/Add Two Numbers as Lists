Add Two Numbers as Lists
Problem Description
You are given two linked lists, A and B, representing two non-negative numbers.

The digits are stored in reverse order, and each of their nodes contains a single digit.

Add the two numbers and return it as a linked list.



Problem Constraints
1 <= |A|, |B| <= 105



Input Format
The first argument of input contains a pointer to the head of linked list A.

The second argument of input contains a pointer to the head of linked list B.



Output Format
Return a pointer to the head of the required linked list.



Example Input
Input 1:

 
 A = [2, 4, 3]
 B = [5, 6, 4]
Input 2:

 
 A = [9, 9]
 B = [1]


Example Output
Output 1:

 
 [7, 0, 8]
Output 2:

 
 [0, 0, 1]


Example Explanation
Explanation 1:

 A = 342 and B = 465. A + B = 807. 
Explanation 2:

 A = 99 and B = 1. A + B = 100. 
 
 /**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode A, ListNode B) {
        Queue<Integer> s1 = new LinkedList<Integer>();
        Queue<Integer> s2 = new LinkedList<Integer>();
        
        ListNode t1 = A;
        ListNode t2 = B;
        while(t1!=null)
        {
            s1.add(t1.val);
            t1 = t1.next;
        }
        while(t2!=null)
        {
            s2.add(t2.val);
            t2 = t2.next;
        }
        
        int c = 0;
        int s=0;
        StringBuilder sb = new StringBuilder();
        while(s1.size()>0 || s2.size()>0)
        {
            int a=0;
            int b=0;
            if(s1.size()>0)
            {
                a = s1.remove();
            }
            if(s2.size()>0)
            {
                b = s2.remove();
            }
            
             
            s = c+a+b;
            //System.out.println(a+"-"+b+"-"+c+"-"+s);
            sb.append(s%10);
            
            c = s/10;
        }
        
        if(c!=0)
        {
            sb.append(c);
        }
        
        int l = sb.length();
        
        ListNode ans = null;
        ListNode t = null;
        
        //System.out.println(sb.toString() + l);
        
        for(int i=0;i<l;i++)
        {
            //System.out.println(sb.charAt(i));
            if(ans == null)
            {
                //System.out.println(sb.charAt(i)+";");
                ans = new ListNode(sb.charAt(i)-'0');
                t = ans;
            }
            else
            {
                //System.out.println(sb.charAt(i));
                t.next = new ListNode(sb.charAt(i)-'0');
                t = t.next;
            };
            //i++;
        }
        
        return ans;
    }
}
