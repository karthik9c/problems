Dijsktra
Problem Description

Given a weighted undirected graph having A nodes and M weighted edges, and a source node C.

You have to find an integer array D of size A such that:

=> D[i] : Shortest distance form the C node to node i.

=> If node i is not reachable from C then -1.

Note:

There are no self-loops in the graph.

No multiple edges between two pair of vertices.

The graph may or may not be connected.

Nodes are numbered from 0 to A-1.

Your solution will run on multiple testcases. If you are using global variables make sure to clear them.



Problem Constraints
1 <= A <= 1e5

0 <= B[i][0],B[i][1] < A

0 <= B[i][2] <= 1e3

0 <= C < A



Input Format
The first argument given is an integer A, representing the number of nodes.

The second argument given is the matrix B of size M x 3, where nodes B[i][0] and B[i][1] are connected with an edge of weight B[i][2].

The third argument given is an integer C.



Output Format
Return the integer array D.



Example Input
Input 1:

A = 6
B = [   [0, 4, 9]
        [3, 4, 6] 
        [1, 2, 1] 
        [2, 5, 1] 
        [2, 4, 5] 
        [0, 3, 7] 
        [0, 1, 1] 
        [4, 5, 7] 
        [0, 5, 1] ] 
C = 4
Input 2:

A = 5
B = [   [0, 3, 4]
        [2, 3, 3] 
        [0, 1, 9] 
        [3, 4, 10] 
        [1, 3, 8]  ] 
C = 4


Example Output
Output 1:

D = [7, 6, 5, 6, 0, 6]
Output 2:

D = [14, 18, 13, 10, 0]


Example Explanation
Explanation 1:

 All Paths can be considered from the node C to get shortest path
Explanation 2:

 All Paths can be considered from the node C to get shortest path
 
 public class Solution {
    ArrayList<ArrayList<Node>> s = null;
    boolean[] v;
    int[] minW;
    public ArrayList<Integer> solve(int A, ArrayList<ArrayList<Integer>> B, int C) {
        s = new ArrayList<ArrayList<Node>>();
        v = new boolean[A];
        minW = new int[A];
        for(int i=0;i<A;i++)
        {
            s.add(new ArrayList<Node>());
            minW[i] = -1;
        }
        for(int i=0;i<B.size();i++)
        {
            ArrayList<Integer> l = B.get(i);
            
            Node tn1 = new Node();
            tn1.next = l.get(1);
            tn1.w = l.get(2);
            s.get(l.get(0)).add(tn1);
            
            Node tn2 = new Node();
            tn2.next = l.get(0);
            tn2.w = l.get(2);
    
            s.get(l.get(1)).add(tn2);
        }
        
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new pqComparator());
        
        pq.add(new int[]{0,C});
        
        while(pq.size() > 0)
        {
            int[] t = pq.poll();
            
            if(!v[t[1]])
            {
                v[t[1]] = true;
                minW[t[1]] = t[0];
                ArrayList<Node> ts = s.get(t[1]);
                
                for(int i=0;i<ts.size();i++)
                {
                    Node n = ts.get(i);
                    //System.out.println(n.next);
                    if(minW[n.next] == -1 || minW[n.next] > (t[0] + n.w))
                    {
                        minW[n.next] = t[0]+ n.w;
                        pq.add(new int[]{t[0]+ n.w, n.next});
                    }
                }
                
            }
        }
        
        ArrayList<Integer> r = new ArrayList<Integer>();
        for(int i=0;i<minW.length;i++)
        {
            r.add(minW[i]);
        }
        
        return r;
    }
}

class Node
{
    public int next;
    public int w;
}

class pqComparator implements Comparator<int[]>
{
    @Override
    public int compare(int[] c1, int[] c2)
    {
        return (new Integer(c1[0])).compareTo(c2[0]);
    }
}
