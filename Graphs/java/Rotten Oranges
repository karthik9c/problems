Problem Description
Given a matrix of integers A of size N x M consisting of 0, 1 or 2.

Each cell can have three values:

The value 0 representing an empty cell.

The value 1 representing a fresh orange.

The value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (Left, Right, Top, or Bottom) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.

Note: Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.



Problem Constraints
1 <= N, M <= 1000

0 <= A[i][j] <= 2



Input Format
The first argument given is the integer matrix A.



Output Format
Return the minimum number of minutes that must elapse until no cell has a fresh orange.

If this is impossible, return -1 instead.



Example Input
Input 1:

A = [   [2, 1, 1]
        [1, 1, 0]
        [0, 1, 1]   ]
Input 2:

 
A = [   [2, 1, 1]
        [0, 1, 1]
        [1, 0, 1]   ]


Example Output
Output 1:

 4
Output 2:

 -1


Example Explanation
Explanation 1:

 Max of 4 using (0,0) , (0,1) , (1,1) , (1,2) , (2,2)
Explanation 2:

 Task is impossible
 
 public class Solution {
    Queue<Info> q;
    int[][] v;
    int rows;
    int cols;
    int ans = 0;
    int fresh = 0;
    public int solve(int[][] A) {
        rows = A.length;
        cols = A[0].length; 
        v = new int[rows][cols];
        q = new LinkedList<Info>();
        
        addInitialRotten(A);
        process(A);

        return (fresh == 0) ? ans : -1;

    }

    public void process(int[][] A)
    {
        while(q.size() > 0)
        {
            Info temp = q.remove();
            if(v[temp.r][temp.c] == 0)
            {
                //System.out.println(temp.level);
                if(temp.level > ans)
                {
                    
                    ans = temp.level;
                }
                goaround(temp.r, temp.c, temp.level, A);
            }
        }
    }

    public void goaround(int r, int c, int l, int[][] A)
    {
        if(A[r][c] == 1)
        {
            fresh--;

        }
        v[r][c] = 1;  
        int[] x = {-1, 0, 1, 0};
        int[] y = {0, 1, 0, -1};

        for(int i=0;i<4;i++)
        {
            int row = r + x[i];
            int col = c + y[i];

            if(row<0 || col<0 || row >=rows || col >= cols)
            {
                continue;
            }
            else
            {
                if(v[row][col] == 0 && A[row][col] == 1)
                {
                    //v[row][col] = 1;

                    Info temp = new Info();
                    temp.r = row;
                    temp.c = col;
                    temp.level = l+1;

                    //System.out.println(temp.level);
                    q.add(temp);
                }
            }
        }
    }

    public void addInitialRotten(int[][] A)
    {
        int row = A.length;
        int col = A[0].length;

        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(A[i][j] == 2)
                {
                    Info t = new Info();
                    t.r = i;
                    t.c = j;
                    t.level = 0;
                    
                    q.add(t);
                }

                if(A[i][j] == 1)
                {
                    fresh++;
                }
            }
        }
    }
}

class Info{
    int r;
    int c;
    int level;
}
