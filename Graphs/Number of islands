Number of islands
Problem Description

Given a matrix of integers A of size N x M consisting of 0 and 1. A group of connected 1's forms an island. From a cell (i, j) such that A[i][j] = 1 you can visit any cell that shares a corner with (i, j) and value in that cell is 1.

More formally, from any cell (i, j) if A[i][j] = 1 you can visit:

(i-1, j) if (i-1, j) is inside the matrix and A[i-1][j] = 1.
(i, j-1) if (i, j-1) is inside the matrix and A[i][j-1] = 1.
(i+1, j) if (i+1, j) is inside the matrix and A[i+1][j] = 1.
(i, j+1) if (i, j+1) is inside the matrix and A[i][j+1] = 1.
(i-1, j-1) if (i-1, j-1) is inside the matrix and A[i-1][j-1] = 1.
(i+1, j+1) if (i+1, j+1) is inside the matrix and A[i+1][j+1] = 1.
(i-1, j+1) if (i-1, j+1) is inside the matrix and A[i-1][j+1] = 1.
(i+1, j-1) if (i+1, j-1) is inside the matrix and A[i+1][j-1] = 1.
Return the number of islands.

NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.



Problem Constraints
1 <= N, M <= 100

0 <= A[i] <= 1



Input Format
The only argument given is the integer matrix A.



Output Format
Return the number of islands.



Example Input
Input 1:

 A = [ 
       [0, 1, 0]
       [0, 0, 1]
       [1, 0, 0]
     ]
Input 2:

 A = [   
       [1, 1, 0, 0, 0]
       [0, 1, 0, 0, 0]
       [1, 0, 0, 1, 1]
       [0, 0, 0, 0, 0]
       [1, 0, 1, 0, 1]    
     ]


Example Output
Output 1:

 2
Output 2:

 5


Example Explanation
Explanation 1:

 The 1's at position A[0][1] and A[1][2] forms one island.
 Other is formed by A[2][0].
Explanation 2:

 There 5 island in total.

class Solution {
    int[] r;
    int[] c;
    bool[,] v;
    int m;
    int n;
    public int solve(List<List<int>> A) {
        int count =0;
        m = A.Count();
        n = A[0].Count();
        r = new int[8]{-1, 0, 1, 0, -1, 1, -1, 1};
        c = new int[8]{0, -1, 0, 1, -1, 1, 1, -1};
        v = new bool[m,n];
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(!v[i,j] && A[i][j] == 1)
                {
                    dsf(i,j,A);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    public void dsf(int rv, int cv, List<List<int>> A)
    {
        if(v[rv,cv])
        {
            return;
        }
        v[rv,cv] = true;
        
        for(int i=0;i<8;i++)
        {
            int ut = rv + r[i];
            int vt = cv + c[i];
            
            if(ut >= 0 && vt >=0 && ut<m && vt <n && !v[ut,vt] && (A[ut][vt] == 1))
            {
                dsf(ut,vt,A);
            }
        }
    }
}
