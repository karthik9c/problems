Rotten Oranges
Problem Description

Given a matrix of integers A of size N x M consisting of 0, 1 or 2.

Each cell can have three values:

The value 0 representing an empty cell.

The value 1 representing a fresh orange.

The value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (Left, Right, Top, or Bottom) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.

Note: Your solution will run on multiple test cases. If you are using global variables, make sure to clear them.



Problem Constraints
1 <= N, M <= 1000

0 <= A[i][j] <= 2



Input Format
The first argument given is the integer matrix A.



Output Format
Return the minimum number of minutes that must elapse until no cell has a fresh orange.

If this is impossible, return -1 instead.



Example Input
Input 1:

A = [   [2, 1, 1]
        [1, 1, 0]
        [0, 1, 1]   ]
Input 2:

 
A = [   [2, 1, 1]
        [0, 1, 1]
        [1, 0, 1]   ]


Example Output
Output 1:

 4
Output 2:

 -1


Example Explanation
Explanation 1:

 Max of 4 using (0,0) , (0,1) , (1,1) , (1,2) , (2,2)
Explanation 2:

 Task is impossible
 
 using System.Collections.Generic;

class Solution {
    bool[,] v;
    int m;
    int n;
    int[] r;
    int[] c;
    int ty =0;
    int oneC=0;
    public int solve(List<List<int>> A) {
        ty =0;
        oneC = 0;
        m = A.Count();
        n = A[0].Count();
        r = new int[]{-1,0,1,0};
        c = new int[]{0,1,0,-1};
        v = new bool[m,n];
        
        Queue<int[]> q = new Queue<int[]>();
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(A[i][j] == 2)
                {
                    q.Enqueue(new int[]{i,j,0});
                    v[i,j] = true;
                }
                if(A[i][j] == 1)
                {
                    oneC++;
                }
            }
        }
        int toneC =0;
        while(q.Count > 0)
        {
            var t = q.Dequeue();
            
            for(int i=0;i<4;i++)
            {
                int x = t[0] + r[i];
                int y = t[1] + c[i];
                //Console.WriteLine(x+"---"+y);
                if(x>=0 && y >= 0 && x<m && y<n && !v[x,y] && A[x][y]==1)
                {
                    //Console.WriteLine(x+"-"+y);
                    toneC++;
                    v[x,y] = true;
                    q.Enqueue(new int[] {x,y,t[2]+1});
                    ty = Math.Max(ty, t[2]+1);
                }
            }
        }
        //Console.WriteLine(toneC + "-" + oneC);
        if(toneC == oneC)
        {
            return ty;
        }
        else
        {
            return -1;
        }
    }
}
