Cycle in Directed Graph
Problem Description

Given an directed graph having A nodes. A matrix B of size M x 2 is given which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].

Find whether the graph contains a cycle or not, return 1 if cycle is present else return 0.

NOTE:

The cycle must contain atleast two nodes.
There are no self-loops in the graph.
There are no multiple edges between two nodes.
The graph may or may not be connected.
Nodes are numbered from 1 to A.
Your solution will run on multiple test cases. If you are using global variables make sure to clear them.


Problem Constraints
2 <= A <= 105

1 <= M <= min(200000,A*(A-1))

1 <= B[i][0], B[i][1] <= A



Input Format
The first argument given is an integer A representing the number of nodes in the graph.

The second argument given a matrix B of size M x 2 which represents the M edges such that there is a edge directed from node B[i][0] to node B[i][1].



Output Format
Return 1 if cycle is present else return 0.



Example Input
Input 1:

 A = 5
 B = [  [1, 2] 
        [4, 1] 
        [2, 4] 
        [3, 4] 
        [5, 2] 
        [1, 3] ]
Input 2:

 A = 5
 B = [  [1, 2]
        [2, 3] 
        [3, 4] 
        [4, 5] ]


Example Output
Output 1:

 1
Output 2:

 0


Example Explanation
Explanation 1:

 The given graph contain cycle 1 -> 3 -> 4 -> 1 or the cycle 1 -> 2 -> 4 -> 1
Explanation 2:

 The given graph doesn't contain any cycle.
 
 class Solution {
    List<List<int>> l;
    int c;
    public int solve(int A, List<List<int>> B) {
        c = A;
        l = new List<List<int>>();
        //v = new bool[A+1];
        for(int i=0;i<=A;i++)
        {
            l.Add(new List<int>());
        }

        for(int i=0;i<B.Count();i++)
        {
            l[B[i][0]].Add(B[i][1]);
            //Console.WriteLine(B[i][0]+"-"+B[i][1]);
        }

        for(int i=1;i<=A;i++)
        {
            bool[] v = new bool[A+1];
            //Console.WriteLine("----"+i);
            if(dfs(i, v) ==1)
            {
                return 1;
            }          
        }

        return 0;
    }

    public int dfs(int n, bool[] tv)
    {
        //Console.WriteLine("fff"+tv[2]);
        //Console.WriteLine("***"+n);
        if(tv[n])
        {
            //Console.WriteLine("rrr"+n);
            return 1;
        }
        var t = l[n];
        tv[n] = true;
        for(int i=0;i<t.Count();i++)
        {
            bool[] ta = new bool[c+1];
            Array.Copy(tv,ta,c+1);
            //Console.WriteLine(t[i]+"ll"+n);
            //var b = tv;
            if(dfs(t[i], ta)== 1)
            {
                //Console.WriteLine("test"+n);
                return 1;
            }
        }

        return 0;
    }
}
