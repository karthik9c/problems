First Depth First Search
Problem Description

You are given N towns (1 to N). All towns are connected via unique directed path as mentioned in the input.

Given 2 towns find whether you can reach the first town from the second without repeating any edge.

B C : query to find whether B is reachable from C.

Input contains an integer array A of size N and 2 integers B and C ( 1 <= B, C <= N ).

There exist a directed edge from A[i] to i+1 for every 1 <= i < N. Also, it's guaranteed that A[i] <= i.

NOTE: Array A is 0-indexed.



Problem Constraints
1 <= n <= 100000



Input Format
First argument is vector A

Second argument is integer B

Third argument is integer C



Output Format
Return 1 if reachable, 0 otherwise.



Example Input
Input 1:

 A = [1, 1, 2]
 B = 1
 C = 2
Input 2:

 A = [1, 1, 2]
 B = 2
 C = 1


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 Tree is 1--> 2--> 3 and hence 1 is not reachable from 2.
Explanation 2:

 Tree is 1--> 2--> 3 and hence 2 is reachable from 1.


class Solution {
    int n;
    bool ans;
    List<List<int>> vl;
    bool[] v;
    public int solve(List<int> A, int B, int C) {
        ans = false;
        n = A.Count();
        v = new bool[n+1];
        vl = new List<List<int>>();
        
        for(int i=0;i<=n;i++)
        {
            vl.Add(new List<int>());
        }
        
        for(int i=0;i<A.Count();i++)
        {
            vl[A[i]].Add(i+1);
        }
        //Console.WriteLine("asd");
        dsf(C, B, C);
        
        return ans ? 1: 0;
    }
    
    public void dsf(int s, int d, int n)
    {
        if(n == d)
        {
            ans = true;
            return;
        }
        if(v[n])
        {
            return;
        }
        v[n] = true;
        var tnvl = vl[n];
        //Console.WriteLine("1");
        for(int i=0;i<tnvl.Count();i++)
        {
            if(!v[tnvl[i]])
            {
                dsf(s, d, tnvl[i]);
            }
        }
        
    }
}
