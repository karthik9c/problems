Range Minimum Query
Problem Description

Given an integer array A of size N.

You have to perform two types of query, in each query you are given three integers x,y,z.

If x = 0, then update A[y] = z.
If x = 1, then output the minimum element in the array A between index y and z inclusive.
Queries are denoted by a 2-D array B of size M x 3 where B[i][0] denotes x, B[i][1] denotes y, B[i][2] denotes z.



Problem Constraints
1 <= N, M <= 105

1 <= A[i] <= 109

If x = 0, 1<= y <= N and 1 <= z <= 109

If x = 1, 1<= y <= z <= N



Input Format
First argument is an integer array A of size N.

Second argument is a 2-D array B of size M x 3 denoting queries.



Output Format
Return an integer array denoting the output of each query where value of x is 1.



Example Input
Input 1:

 A = [1, 4, 1]
 B = [ 
        [1, 1, 3]
        [0, 1, 5]
        [1, 1, 2] 
     ]
Input 2:

 A = [5, 4, 5, 7]
 B = [ 
        [1, 2, 4]
        [0, 1, 2]
        [1, 1, 4]
     ]


Example Output
Output 1:

 [1, 4]
Output 2:

 [4, 2]


Example Explanation
Explanation 1:

 For 1st query, the minimum element from range (1, 3) is 1.
 For 2nd query, update A[1] = 5, now A = [5, 4, 1].
 For 3rd query, the minimum element from range (1, 2) is 4.
Explanation 2:

 For 1st query, the minimum element from range (2, 4) is 4.
 For 2nd query, update A[1] = 2, now A = [2, 4, 5, 7].
 For 3rd query, the minimum element from range (1, 4) is 2.
 
 class Solution {
    int[] s;
    int max = 0;
    public List<int> solve(List<int> A, List<List<int>> B) {
        s = new int[4 * A.Count()];
        max = s.Length;
        build(0, 0, A.Count()-1, A);
        
        var r = new List<int>();
        for(int i=0;i<B.Count();i++)
        {
            if(B[i][0] == 0)
            {
                update(0, 0, A.Count()-1, B[i][1]-1, B[i][2]);
            }
            else
            {
                int t = findMin(0, 0, A.Count()-1, B[i][1]-1, B[i][2]-1);
                r.Add(t);
            }
        }
        return r;
    }
    
    public void build(int ind, int low, int high, List<int> A)
    {
        if(low == high)
        {
            s[ind] = A[low];
            return;
        }
        int mid = (low + high)/2;
        build(2*ind + 1, low, mid, A);
        build(2*ind + 2, mid+1, high, A);
        
        if(s[2*ind + 1] < s[2*ind + 2])
        {
            s[ind] = s[2*ind + 1];
        }
        else
        {
            s[ind] =  s[2*ind + 2];
        }
    }
    
    public int findMin(int ind, int low, int high, int ql, int qh)
    {
        if(high < ql || low > qh) // no overlap
        {
            return int.MaxValue;
        }
        
        if(low >= ql && high <= qh) // full 
        {
            return s[ind];
        }
        
        // partial overlap
        int mid = (low + high)/2;
        int l = findMin(2*ind + 1, low, mid, ql, qh);
        int r = findMin(2*ind + 2, mid + 1, high, ql, qh);
        //Console.WriteLine("fial" + l + "-" + r);
        if(l < r)
        {
            return l;
        }
        else
        {
            return r;
        }
        
    }
    
    public void update(int ind, int low, int high, int x, int y)
    {
        if(low == high)
        {
            s[ind] = y;
            return;
        }
        
        int mid = (low + high)/2;
        
        if(x > mid)
        {
            update(2*ind + 2, mid+1, high, x, y);
        }
        else
        {
            update(2*ind + 1, low, mid, x, y);
        }
        
        if(s[2*ind + 1] < s[2*ind + 2])
        {
            s[ind] = s[2*ind + 1];
        }
        else
        {
            s[ind] =  s[2*ind + 2];
        }
        
    }
}
