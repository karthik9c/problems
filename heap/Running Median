Running Median
Problem Description

Given an array of integers A denoting a stream of integers. New arrays of integer B and C are formed. Each time an integer is encountered in a stream, append it at the end of B and append median of array B at the C.

Find and return the array C.

NOTE:

If the number of elements are N in B and N is odd then consider medain as B[N/2] ( B must be in sorted order).
If the number of elements are N in B and N is even then consider medain as B[N/2-1]. ( B must be in sorted order).


Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109



Input Format
The only argument given is the integer array A.



Output Format
Return an integer array C, C[i] denotes the median of first i elements.



Example Input
Input 1:

 A = [1, 2, 5, 4, 3]
Input 2:

 A = [5, 17, 100, 11]


Example Output
Output 1:

 [1, 1, 2, 2, 3]
Output 2:

 [5, 5, 17, 11]


Example Explanation
Explanation 1:

 stream          median
 [1]             1
 [1, 2]          1
 [1, 2, 5]       2
 [1, 2, 5, 4]    2
 [1, 2, 5, 4, 3] 3
Explanation 2:

 stream          median
 [5]              5
 [5, 17]          5
 [5, 17, 100]     17
 [5, 17, 100, 11] 11
 
 public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        PriorityQueue<Integer> minPQ = new PriorityQueue<Integer>();
        PriorityQueue<Integer> maxPQ = new PriorityQueue<Integer>(new MaxComparator());
        
        ArrayList<Integer> r = new ArrayList<Integer>();
        
        for(int i=0;i<A.size();i++)
        {
            if(maxPQ.size() == minPQ.size())
            {
                if(maxPQ.size() == 0)
                {
                    maxPQ.add(A.get(i));
                }
                else
                {
                    if(minPQ.peek() < A.get(i))
                    {
                        int t = minPQ.poll();
                        maxPQ.add(t);
                        minPQ.add(A.get(i));
                    }
                    else
                    {
                        //System.out.println(A.get(i));
                        maxPQ.add(A.get(i));
                    }
                }
                
            }
            else//(maxPQ.size() > minPQ.size())
            {
                if(maxPQ.peek() <  A.get(i))
                {
                    minPQ.add(A.get(i));
                }
                else
                {
                    int t = maxPQ.poll();
                    minPQ.add(t);
                    maxPQ.add(A.get(i));
                }
            }
            
            r.add(maxPQ.peek());
        }
        return r;
    }
    
    
}

class MaxComparator implements Comparator<Integer>
{
    @Override
    public int compare(Integer a, Integer b)
    {
        return b-a;
    }
}
