Problem Description
Given an integer A pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*A.



Problem Constraints
1 <= A <= 10



Input Format
First and only argument is integer A.



Output Format
Return a sorted list of all possible parenthesis.



Example Input
Input 1:

A = 3
Input 2:

A = 1


Example Output
Output 1:

[ "((()))", "(()())", "(())()", "()(())", "()()()" ]
Output 2:

[ "()" ]


Example Explanation
Explanation 1:

 All paranthesis are given in the output list.
Explanation 2:

 All paranthesis are given in the output list.
 
 public class Solution {
    ArrayList<String> ans;
    public String[] generateParenthesis(int A) {
        ans = new ArrayList<String>();
        build(new StringBuilder(), 0, 0, A, 0);
        String[] fans = new String[ans.size()];

        for(int i=0;i<ans.size();i++)
        {
            fans[i] = ans.get(i);
        }

        return fans;
    }

    public void build(StringBuilder sb, int open, int close, int A, int ind)
    {
        if(ind >= 2*A)
        {
            ans.add(sb.toString());
            return;
        }

        if(open == close)
        {
            sb.append("(");
            build(sb, open +1,close, A, ind+1);
            sb.deleteCharAt(sb.length()-1);
        }
        else
        {
            if(open < A)
            {
                sb.append("(");
                build(sb, open +1, close, A, ind+1);
                sb.deleteCharAt(sb.length()-1);
            }
            
            sb.append(")");
            build(sb, open, close +1, A, ind+1);
            sb.deleteCharAt(sb.length()-1);
        }
    }
}
