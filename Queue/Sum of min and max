Sum of min and max
Problem Description
Given an array A of both positive and negative integers.

Your task is to compute the sum of minimum and maximum elements of all sub-array of size B.

NOTE: Since the answer can be very large, you are required to return the sum modulo 109 + 7.



Problem Constraints
1 <= size of array A <= 105

-109 <= A[i] <= 109

1 <= B <= size of array



Input Format
The first argument denotes the integer array A.
The second argument denotes the value B



Output Format
Return an integer that denotes the required value.



Example Input
Input 1:

 A = [2, 5, -1, 7, -3, -1, -2]
 B = 4
Input 2:

 A = [2, -1, 3]
 B = 2


Example Output
Output 1:

 18
Output 2:

 3


Example Explanation
Explanation 1:

 Subarrays of size 4 are : 
    [2, 5, -1, 7],   min + max = -1 + 7 = 6
    [5, -1, 7, -3],  min + max = -3 + 7 = 4      
    [-1, 7, -3, -1], min + max = -3 + 7 = 4
    [7, -3, -1, -2], min + max = -3 + 7 = 4   
    Sum of all min & max = 6 + 4 + 4 + 4 = 18 
Explanation 2:

 Subarrays of size 2 are : 
    [2, -1],   min + max = -1 + 2 = 1
    [-1, 3],   min + max = -1 + 3 = 2
    Sum of all min & max = 1 + 2 = 3 
    
    public class Solution {
    long m = 1000000007;
    public int solve(int[] A, int B) {
        PriorityQueue<sam> minpq = new PriorityQueue<sam>(new minCompare());
        PriorityQueue<sam> maxpq = new PriorityQueue<sam>(new maxCompare());
        
        long ans = 0;
        
        for(int i=0;i<B;i++)
        {
            sam s = new sam();
            s.ind = i;
            s.val = A[i];
            
            minpq.add(s);
            maxpq.add(s);
        }
        
        ans = (ans + (minpq.peek().val + maxpq.peek().val + m)%m)%m;
        
        //System.out.println(ans);
        int k=1;
        for(int i=B;i<A.length;i++)
        {
            sam s = new sam();
            s.ind = i;
            s.val = A[i];
            
            minpq.add(s);
            maxpq.add(s);
            
            while(minpq.peek().ind < k)
            {
                minpq.remove();
            }
            while(maxpq.peek().ind < k)
            {
                maxpq.remove();
            }
            
            ans = (ans + (minpq.peek().val + maxpq.peek().val+m)%m)%m;
            k++;
            //System.out.println(ans);
        }
        
        return (int)ans;
    }
}

 class minCompare implements Comparator<sam>
{
    @Override
    public int compare(sam s1, sam s2)
    {
        return (new Integer(s1.val)).compareTo(new Integer(s2.val));
    }
}

 class maxCompare implements Comparator<sam>
{
    @Override
    public int compare(sam s1, sam s2)
    {
        return (new Integer(s2.val)).compareTo(new Integer(s1.val));
    }
}

class sam
{
    public int ind;
    public int val;
}
