Unique Paths in a Grid
Problem Description

Given a grid of size n * m, lets assume you are starting at (1,1) and your goal is to reach (n, m). At any instance, if you are on (x, y), you can either go to (x, y + 1) or (x + 1, y).

Now consider if some obstacles are added to the grids. How many unique paths would there be? An obstacle and empty space is marked as 1 and 0 respectively in the grid.



Problem Constraints
1 <= n, m <= 100
A[i][j] = 0 or 1



Input Format
Firts and only argument A is a 2D array of size n * m.



Output Format
Return an integer denoting the number of unique paths from (1, 1) to (n, m).



Example Input
Input 1:

 A = [
        [0, 0, 0]
        [0, 1, 0]
        [0, 0, 0]
     ]
Input 2:

 A = [
        [0, 0, 0]
        [1, 1, 1]
        [0, 0, 0]
     ]


Example Output
Output 1:

 2
Output 2:

 0


Example Explanation
Explanation 1:

 Possible paths to reach (n, m): {(1, 1), (1, 2), (1, 3), (2, 3), (3, 3)} and {(1 ,1), (2, 1), (3, 1), (3, 2), (3, 3)}  
 So, the total number of unique paths is 2. 
Explanation 2:

 It is not possible to reach (n, m) from (1, 1). So, ans is 0.
 
 class Solution {
    int[,] s;
    public int uniquePathsWithObstacles(List<List<int>> A) {
        int r = A.Count();
        int c = A[0].Count();
        s = new int[r,c];
        
        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                s[i,j] = -1;
            }
        }
        //Console.WriteLine("1");
        if(A[0][0] == 1)
        {
            return 0;
        }
        s[0,0] = 1;
        int tt = 1;
        for(int i=1;i<r;i++)
        {
            //Console.WriteLine(i);
            if(A[i][0] == 1)
            {
                tt = 0;
            }
            s[i,0] = tt;
        }
        tt = 1;
        for(int i=1;i<c;i++)
        {
            //Console.WriteLine(i);
            if(A[0][i] == 1)
            {
                tt = 0;
            }
            s[0,i] = tt;
        }
        //Console.WriteLine("2");
        return ways(r-1, c-1, A);
    }
    
    public int ways(int row, int col, List<List<int>> A)
    {
        if(s[row,col] != -1)
        {
            return s[row,col];
        }
        
        
        int ts;
        if(A[row][col] == 1)
        {
            ts = 0;
        }
        else
        {
            ts = ways(row, col-1, A) + ways(row-1, col, A);
        }
        
        s[row, col] = ts;
        return ts;
    }
}
