Problem Description
Given two strings A and B. Find the longest common subsequence ( A sequence which does not need to be contiguous), which is common in both the strings.

You need to return the length of such longest common subsequence.



Problem Constraints
1 <= Length of A, B <= 1005



Input Format
First argument is a string A.
Second argument is a string B.



Output Format
Return an integer denoting the length of the longest common subsequence.



Example Input
Input 1:

 A = "abbcdgf"
 B = "bbadcgf"
Input 2:

 A = "aaaaaa"
 B = "ababab"


Example Output
Output 1:

 5
Output 2:

 3


Example Explanation
Explanation 1:

 The longest common subsequence is "bbcgf", which has a length of 5.
Explanation 2:

 The longest common subsequence is "aaa", which has a length of 3.
 
 public class Solution {
    int[][] dp;
    public int solve(String A, String B) {
        dp = new int[A.length()+1][B.length()+1];

        for(int i=0;i<=A.length();i++)
        {
            for(int j=0;j<=B.length();j++)
            {
                dp[i][j] = -1;
            }
        }

        return lcs(A.length(), B.length(), A, B);
    }

    int lcs(int l1, int l2, String A, String B)
    {
        if(l1 == 0 || l2 == 0)
        {
            return 0;
        }
        if(dp[l1][l2] != -1)
        {
            return dp[l1][l2];
        }
        if(A.charAt(l1-1) == B.charAt(l2-1))
        {
            dp[l1][l2] = 1 + lcs(l1-1, l2-1, A, B);
            return dp[l1][l2];
        }
        else
        {
            dp[l1][l2] = Math.max(lcs(l1-1, l2, A, B), lcs(l1, l2-1, A, B));
            return dp[l1][l2];
        }
    }

}
