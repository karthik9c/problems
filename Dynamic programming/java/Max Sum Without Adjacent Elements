Problem Description

Given a 2 x N grid of integer, A, choose numbers such that the sum of the numbers is maximum and no two chosen numbers are adjacent horizontally, vertically or diagonally, and return it.

Note: You can choose more than 2 numbers.



Problem Constraints

1 <= N <= 20000
1 <= A[i] <= 2000



Input Format

The first and the only argument of input contains a 2d matrix, A.



Output Format

Return an integer, representing the maximum possible sum.



Example Input

Input 1:

 A = [   
        [1]
        [2]    
     ]
Input 2:

 A = [   
        [1, 2, 3, 4]
        [2, 3, 4, 5]    
     ]


Example Output

Output 1:

 2
Output 2:

 8


Example Explanation

Explanation 1:

 We will choose 2.
Explanation 2:

 We will choose 3 and 5.
 
 public class Solution {
    int m;
    int[][] dp;
    public int adjacent(int[][] A) {
        m = A[0].length;
        dp = new int[2][m];

        for(int i=0;i<2;i++)
        {
            for(int j=0;j<m;j++)
            {
                dp[i][j] = -1;
            }
        }

        int max = Integer.MIN_VALUE;

        max = Math.max(max, p(A, 0, 0));
        max = Math.max(max, p(A, 0, 1));
        max = Math.max(max, p(A, 1, 0));
        max = Math.max(max, p(A, 1, 1));

        return max;
    }

    public int p(int[][] A, int x, int y)
    {
         //System.out.println(m+"-"+x + "-"+ y);
        if(x > 1 || x <0 || y > m-1)
        {
            return 0;
        }

        if(dp[x][y] != -1)
        {
            return dp[x][y];
        }
        int max = Integer.MIN_VALUE;

        max = Math.max(max, p(A, x, y+2));
        max = Math.max(max, p(A, x, y+3));
        max = Math.max(max, p(A, x+1, y+2));
        max = Math.max(max, p(A, x+1, y+3));
        max = Math.max(max, p(A, x-1, y+2));
        max = Math.max(max, p(A, x-1, y+3));

        dp[x][y] = A[x][y] + max;

        //System.out.println(dp[x][y] + "-"+ x + "-"+ y);
        return dp[x][y];
    }
}
