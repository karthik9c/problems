Problem Description
Given an integer A, how many structurally unique BST's (binary search trees) exist that can store values 1...A?



Problem Constraints
1 <= A <=18



Input Format
First and only argument is the integer A



Output Format
Return a single integer, the answer to the problem



Example Input
Input 1:

 1
Input 2:

 2


Example Output
Output 1:

 1
Output 2:

 2


Example Explanation
Explanation 1:

 Only single node tree is possible.
Explanation 2:

 2 trees are possible, one rooted at 1 and other rooted at 2.
 
 public class Solution {
    int[] dp;
    public int numTrees(int A) {
        dp = new int[A+1];

        for(int i=0;i<=A;i++)
        {
            dp[i] = -1;
        }

        return count(A);
    }

    public int count(int A)
    {
        if(A == 1 || A == 0)
        {
            return 1;
        }
        if(A == 2)
        {
            return 2;
        }
        if(dp[A]!=-1)
        {
            return dp[A];
        }
        int sum =0;
        int l =0;
        int r = A-1;
        while(l<= A-1 && r >=0)
        {
            sum += (count(l) * count(r));
            l++;
            r--;
        }

        dp[A] = sum;
        return sum;
    }
}
