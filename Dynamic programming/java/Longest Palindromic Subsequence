Problem Description
Given a string A. Find the longest palindromic subsequence (A subsequence which does not need to be contiguous and is a palindrome).

You need to return the length of longest palindromic subsequence.



Problem Constraints
1 <= length of(A) <= 103



Input Format
First and only integer is a string A.



Output Format
Return an integer denoting the length of longest palindromic subsequence.



Example Input
Input 1:

 A = "bebeeed"
Input 2:

 A = "aedsead"


Example Output
Output 1:

 4
Output 2:

 5


Example Explanation
Explanation 1:

 The longest palindromic subsequence is "eeee", which has a length of 4.
Explanation 2:

 The longest palindromic subsequence is "aedea", which has a length of 5.
 
 public class Solution {
    int[][] dp;
    public int solve(String A) {
        dp = new int[A.length()][A.length()];
        for(int i=0;i<A.length();i++)
        {
            for(int j=0; j<A.length();j++)
            {
                dp[i][j] = -1;
            }
        }

        return pali(0, A.length()-1, A);
    }

    public int pali(int i, int j, String A)
    {
        if(i>=A.length() || j<0)
        {
            return 0;
        }
        if(dp[i][j] != -1)
        {
            return dp[i][j];
        }
        char a = A.charAt(i);
        char b = A.charAt(j);
        if(a == b)
        {
            dp[i][j] = 1 + pali(i+1, j-1, A);
        }
        else
        {
            dp[i][j] = Math.max(pali(i+1, j, A), pali(i, j-1, A));
        }

        return dp[i][j];
    }
}
